syntax = "proto3";
package ClanNetwork.clannetwork.claim.v1beta1;

import "clan/claim/v1beta1/claim_eth_record.proto";
// this line is used by starport scaffolding # proto/tx/import
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "clan/claim/v1beta1/claim_record.proto";

option go_package = "github.com/ClanNetwork/clan-network/x/claim/types";

// Msg defines the Msg service.
service Msg {
  rpc InitialClaim(MsgInitialClaim) returns (MsgInitialClaimResponse);
  rpc ClaimForEthAddress(MsgClaimForEthAddress) returns (MsgClaimForEthAddressResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgInitialClaim {
  string creator = 1;
  string signed = 2; // the tx containing what is needed to claim - if it is the same as creator there is not need for pubkey / signature
  string signature = 3;
}

message MsgInitialClaimResponse {
  repeated cosmos.base.v1beta1.Coin claimed_amount = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"claimed_amount\""
  ];
}

message MsgClaimAddressSigned {
  string value = 1;
}

message MsgClaimForEthAddress {
  string creator = 1;
  string message = 2;
  string signature = 3;
}

message MsgClaimForEthAddressResponse {
  repeated cosmos.base.v1beta1.Coin claimed_amount = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"claimed_amount\""
  ];
}

// this line is used by starport scaffolding # proto/tx/message