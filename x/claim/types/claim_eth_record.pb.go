// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clan/claim/v1beta1/claim_eth_record.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimEthRecord struct {
	// address of claim user
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// total initial claimable amount for the user
	InitialClaimableAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=initial_claimable_amount,json=initialClaimableAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"initial_claimable_amount" yaml:"initial_claimable_amount"`
	// true if action is completed
	Completed bool `protobuf:"varint,3,opt,name=completed,proto3" json:"completed,omitempty" yaml:"completed"`
}

func (m *ClaimEthRecord) Reset()         { *m = ClaimEthRecord{} }
func (m *ClaimEthRecord) String() string { return proto.CompactTextString(m) }
func (*ClaimEthRecord) ProtoMessage()    {}
func (*ClaimEthRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6851138bf370461, []int{0}
}
func (m *ClaimEthRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimEthRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimEthRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimEthRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimEthRecord.Merge(m, src)
}
func (m *ClaimEthRecord) XXX_Size() int {
	return m.Size()
}
func (m *ClaimEthRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimEthRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimEthRecord proto.InternalMessageInfo

func (m *ClaimEthRecord) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ClaimEthRecord) GetInitialClaimableAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.InitialClaimableAmount
	}
	return nil
}

func (m *ClaimEthRecord) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func init() {
	proto.RegisterType((*ClaimEthRecord)(nil), "ClanNetwork.clannetwork.claim.v1beta1.ClaimEthRecord")
}

func init() {
	proto.RegisterFile("clan/claim/v1beta1/claim_eth_record.proto", fileDescriptor_d6851138bf370461)
}

var fileDescriptor_d6851138bf370461 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbf, 0x6a, 0xeb, 0x30,
	0x14, 0xc6, 0xed, 0x04, 0xee, 0xbd, 0xf1, 0x85, 0x70, 0x31, 0xe1, 0xe2, 0x66, 0xb0, 0x83, 0xa1,
	0xe0, 0x42, 0x63, 0x91, 0x74, 0xeb, 0x56, 0x9b, 0x4e, 0x85, 0x0e, 0xee, 0xd6, 0xc5, 0xc8, 0xb6,
	0x48, 0x44, 0xf4, 0x27, 0x58, 0x4a, 0xdb, 0xbc, 0x45, 0x5f, 0xa0, 0x7b, 0xe9, 0x93, 0x64, 0xcc,
	0xd8, 0xc9, 0x2d, 0xc9, 0x1b, 0xe4, 0x09, 0x8a, 0x25, 0xa7, 0xc9, 0xd2, 0x49, 0x47, 0x9c, 0xf3,
	0xfd, 0xce, 0x27, 0x7d, 0xd6, 0x59, 0x4e, 0x20, 0x03, 0x39, 0x81, 0x98, 0x82, 0x87, 0x51, 0x86,
	0x24, 0x1c, 0xe9, 0x5b, 0x8a, 0xe4, 0x34, 0x2d, 0x51, 0xce, 0xcb, 0x22, 0x9c, 0x97, 0x5c, 0x72,
	0xfb, 0x34, 0x26, 0x90, 0xdd, 0x22, 0xf9, 0xc8, 0xcb, 0x59, 0x58, 0xcb, 0xd8, 0xa1, 0xc6, 0x34,
	0x6c, 0xd4, 0xfd, 0xde, 0x84, 0x4f, 0xb8, 0x52, 0x80, 0xba, 0xd2, 0xe2, 0xbe, 0x9b, 0x73, 0x41,
	0xb9, 0x00, 0x19, 0x14, 0xe8, 0xb0, 0x88, 0x63, 0xa6, 0xfb, 0xfe, 0x4b, 0xcb, 0xea, 0xc6, 0x35,
	0xe7, 0x5a, 0x4e, 0x13, 0xb5, 0xd5, 0x3e, 0xb7, 0x7e, 0xc3, 0xa2, 0x28, 0x91, 0x10, 0x8e, 0x39,
	0x30, 0x83, 0x4e, 0x64, 0xef, 0x2a, 0xaf, 0xbb, 0x84, 0x94, 0x5c, 0xfa, 0x4d, 0xc3, 0x4f, 0xf6,
	0x23, 0xf6, 0xab, 0x69, 0x39, 0x98, 0x61, 0x89, 0x21, 0x49, 0x95, 0x21, 0x98, 0x11, 0x94, 0x42,
	0xca, 0x17, 0x4c, 0x3a, 0xad, 0x41, 0x3b, 0xf8, 0x3b, 0x3e, 0x09, 0xb5, 0x89, 0xb0, 0x36, 0xb1,
	0xf7, 0x1b, 0xc6, 0x1c, 0xb3, 0xe8, 0x6e, 0x55, 0x79, 0xc6, 0xae, 0xf2, 0x3c, 0x8d, 0xff, 0x09,
	0xe4, 0xbf, 0x7d, 0x78, 0xc1, 0x04, 0xcb, 0xe9, 0x22, 0x0b, 0x73, 0x4e, 0x41, 0xf3, 0x28, 0x7d,
	0x0c, 0x45, 0x31, 0x03, 0x72, 0x39, 0x47, 0x42, 0x31, 0x45, 0xf2, 0xbf, 0xc1, 0xc4, 0x7b, 0xca,
	0x95, 0x82, 0xd8, 0x63, 0xab, 0x93, 0x73, 0x3a, 0x27, 0x48, 0xa2, 0xc2, 0x69, 0x0f, 0xcc, 0xe0,
	0x4f, 0xd4, 0xdb, 0x55, 0xde, 0x3f, 0xbd, 0xfb, 0xbb, 0xe5, 0x27, 0x87, 0xb1, 0xe8, 0x66, 0xb5,
	0x71, 0xcd, 0xf5, 0xc6, 0x35, 0x3f, 0x37, 0xae, 0xf9, 0xbc, 0x75, 0x8d, 0xf5, 0xd6, 0x35, 0xde,
	0xb7, 0xae, 0x71, 0x3f, 0x3a, 0xf2, 0x73, 0x94, 0x50, 0x9d, 0x22, 0x1b, 0x36, 0x11, 0x81, 0xa7,
	0x26, 0x62, 0x65, 0x2f, 0xfb, 0xa5, 0xfe, 0xfc, 0xe2, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x63,
	0xdb, 0xa9, 0xfd, 0x01, 0x00, 0x00,
}

func (m *ClaimEthRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimEthRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimEthRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.InitialClaimableAmount) > 0 {
		for iNdEx := len(m.InitialClaimableAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitialClaimableAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaimEthRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintClaimEthRecord(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClaimEthRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovClaimEthRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClaimEthRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovClaimEthRecord(uint64(l))
	}
	if len(m.InitialClaimableAmount) > 0 {
		for _, e := range m.InitialClaimableAmount {
			l = e.Size()
			n += 1 + l + sovClaimEthRecord(uint64(l))
		}
	}
	if m.Completed {
		n += 2
	}
	return n
}

func sovClaimEthRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClaimEthRecord(x uint64) (n int) {
	return sovClaimEthRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClaimEthRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaimEthRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimEthRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimEthRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimEthRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaimEthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimEthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialClaimableAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimEthRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaimEthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaimEthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialClaimableAmount = append(m.InitialClaimableAmount, types.Coin{})
			if err := m.InitialClaimableAmount[len(m.InitialClaimableAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimEthRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClaimEthRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaimEthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClaimEthRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClaimEthRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaimEthRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaimEthRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClaimEthRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClaimEthRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClaimEthRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClaimEthRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClaimEthRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClaimEthRecord = fmt.Errorf("proto: unexpected end of group")
)
